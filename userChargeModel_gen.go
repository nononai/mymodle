// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"fmt"
	"time"

	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
)

var (
	cacheMinyunUserChargeIdPrefix = "cache:minyun:userCharge:id:"
)

type (
	userChargeModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *UserCharge) error

		FindOne(ctx context.Context, id int64) (*UserCharge, error)
		Update(ctx context.Context, tx *gorm.DB, data *UserCharge) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultUserChargeModel struct {
		gormc.CachedConn
		table string
	}

	UserCharge struct {
		Id          int64     `gorm:"column:id"`
		UserId      int64     `gorm:"column:user_id"`      // 'UserBasic外键'
		UserRole    int64     `gorm:"column:user_role"`    // '用户角色'
		Score       int64     `gorm:"column:score"`        // '积分'
		Address     string    `gorm:"column:address"`      // '地址'
		TotalCarbon int64     `gorm:"column:total_carbon"` // '碳排放'
		TotalEnergy int64     `gorm:"column:total_energy"` // '总耗能'
		CreatedTime time.Time `gorm:"column:created_time"` // '创建时间'
		UpdatedTime time.Time `gorm:"column:updated_time"` // '更新时间'
		DeletedTime time.Time `gorm:"column:deleted_time"` // '删除时间'
		IsBlack     int64     `gorm:"column:is_black"`     // '是否黑名单'
		IsLong      int64     `gorm:"column:is_long"`      // '是否长充模式'
		IsEmty      int64     `gorm:"column:is_emty"`      // '是否判断拔出断电'
		UserPower   int64     `gorm:"column:user_power"`   // '用户充电车功率'
		IsRefund    int64     `gorm:"column:is_refund"`    // '是否允许自助退款'
		RefundType  int64     `gorm:"column:refund_type"`  // '退款方式'
		Remark      string    `gorm:"column:remark"`       // '备注'
		SiteId      int64     `gorm:"column:site_id"`
	}
)

func (UserCharge) TableName() string {
	return "`user_charge`"
}

func newUserChargeModel(conn *gorm.DB, c cache.CacheConf) *defaultUserChargeModel {
	return &defaultUserChargeModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`user_charge`",
	}
}

func (m *defaultUserChargeModel) Insert(ctx context.Context, tx *gorm.DB, data *UserCharge) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&data).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultUserChargeModel) FindOne(ctx context.Context, id int64) (*UserCharge, error) {
	minyunUserChargeIdKey := fmt.Sprintf("%s%v", cacheMinyunUserChargeIdPrefix, id)
	var resp UserCharge
	err := m.QueryCtx(ctx, &resp, minyunUserChargeIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&UserCharge{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserChargeModel) Update(ctx context.Context, tx *gorm.DB, data *UserCharge) error {
	old, err := m.FindOne(ctx, data.Id)
	if err != nil && err != ErrNotFound {
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(data).Error
	}, m.getCacheKeys(old)...)
	return err
}

func (m *defaultUserChargeModel) getCacheKeys(data *UserCharge) []string {
	if data == nil {
		return []string{}
	}
	minyunUserChargeIdKey := fmt.Sprintf("%s%v", cacheMinyunUserChargeIdPrefix, data.Id)
	cacheKeys := []string{
		minyunUserChargeIdKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultUserChargeModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		if err == ErrNotFound {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&UserCharge{}, id).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultUserChargeModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.TransactCtx(ctx, fn)
}

func (m *defaultUserChargeModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheMinyunUserChargeIdPrefix, primary)
}

func (m *defaultUserChargeModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&UserCharge{}).Where("`id` = ?", primary).Take(v).Error
}
