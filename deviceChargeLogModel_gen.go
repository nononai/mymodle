// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"fmt"
	"time"

	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
)

var (
	cacheMinyunDeviceChargeLogIdPrefix = "cache:minyun:deviceChargeLog:id:"
)

type (
	deviceChargeLogModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *DeviceChargeLog) error

		FindOne(ctx context.Context, id int64) (*DeviceChargeLog, error)
		Update(ctx context.Context, tx *gorm.DB, data *DeviceChargeLog) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultDeviceChargeLogModel struct {
		gormc.CachedConn
		table string
	}

	DeviceChargeLog struct {
		Id                int64          `gorm:"column:id"`
		OrderId           int64          `gorm:"column:order_id"`
		Voltage           int64          `gorm:"column:voltage"`              // 电压
		MaxPower          int64          `gorm:"column:max_power"`            // 期间最大功率
		MinPower          int64          `gorm:"column:min_power"`            // 期间最小功率
		Current           int64          `gorm:"column:current"`              // 电流
		ChargeAmount      float64        `gorm:"column:charge_amount"`        // 充电中累计电量
		ChargeTime        int64          `gorm:"column:charge_time"`          // 充电时长
		ChargeFlatPower   int64          `gorm:"column:charge_flat_power"`    // 充电中心跳包期间的平均功率
		ChargeMaxPower    int64          `gorm:"column:charge_max_power"`     // 充电中心跳包期间最大功率
		ChargeMinPower    int64          `gorm:"column:charge_min_power"`     // 充电中心跳包期间最小功率
		ChargePortStat    int64          `gorm:"column:charge_port_stat"`     // 充电中端口状态1，充电中，2，浮充
		ChargeThisPower   int64          `gorm:"column:charge_this_power"`    // 充电中实时心跳功率
		ChargeAllMaxPower int64          `gorm:"column:charge_all_max_power"` // 充电中至今峰值功率
		TimeStamp         int64          `gorm:"column:time_stamp"`           // 时间戳
		OccupyTime        int64          `gorm:"column:occupyTime"`           // 占位时长 单位 分
		Remark            string         `gorm:"column:remark"`
		CreatedAt         time.Time      `gorm:"column:created_at"`
		UpdatedAt         time.Time      `gorm:"column:updated_at"`
		DeletedAt         gorm.DeletedAt `gorm:"column:deleted_at;index"`
	}
)

func (DeviceChargeLog) TableName() string {
	return "`device_charge_log`"
}

func newDeviceChargeLogModel(conn *gorm.DB, c cache.CacheConf) *defaultDeviceChargeLogModel {
	return &defaultDeviceChargeLogModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`device_charge_log`",
	}
}

func (m *defaultDeviceChargeLogModel) Insert(ctx context.Context, tx *gorm.DB, data *DeviceChargeLog) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&data).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultDeviceChargeLogModel) FindOne(ctx context.Context, id int64) (*DeviceChargeLog, error) {
	minyunDeviceChargeLogIdKey := fmt.Sprintf("%s%v", cacheMinyunDeviceChargeLogIdPrefix, id)
	var resp DeviceChargeLog
	err := m.QueryCtx(ctx, &resp, minyunDeviceChargeLogIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&DeviceChargeLog{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDeviceChargeLogModel) Update(ctx context.Context, tx *gorm.DB, data *DeviceChargeLog) error {
	old, err := m.FindOne(ctx, data.Id)
	if err != nil && err != ErrNotFound {
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(data).Error
	}, m.getCacheKeys(old)...)
	return err
}

func (m *defaultDeviceChargeLogModel) getCacheKeys(data *DeviceChargeLog) []string {
	if data == nil {
		return []string{}
	}
	minyunDeviceChargeLogIdKey := fmt.Sprintf("%s%v", cacheMinyunDeviceChargeLogIdPrefix, data.Id)
	cacheKeys := []string{
		minyunDeviceChargeLogIdKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultDeviceChargeLogModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		if err == ErrNotFound {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&DeviceChargeLog{}, id).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultDeviceChargeLogModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.TransactCtx(ctx, fn)
}

func (m *defaultDeviceChargeLogModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheMinyunDeviceChargeLogIdPrefix, primary)
}

func (m *defaultDeviceChargeLogModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&DeviceChargeLog{}).Where("`id` = ?", primary).Take(v).Error
}
