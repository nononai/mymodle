// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"fmt"
	"time"

	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
)

var (
	cacheMinyunSiteChargeIdPrefix = "cache:minyun:siteCharge:id:"
)

type (
	siteChargeModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *SiteCharge) error

		FindOne(ctx context.Context, id int64) (*SiteCharge, error)
		Update(ctx context.Context, tx *gorm.DB, data *SiteCharge) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultSiteChargeModel struct {
		gormc.CachedConn
		table string
	}

	SiteCharge struct {
		Id               int64          `gorm:"column:id"`
		PlatId           int64          `gorm:"column:plat_id"`
		ChannelId        int64          `gorm:"column:channel_id"`
		ShopId           int64          `gorm:"column:shop_id"`
		SiteName         string         `gorm:"column:site_name"`
		LinkMobile       string         `gorm:"column:link_mobile"`         // 联系电话
		Address          string         `gorm:"column:address"`             // 详细地址
		Latitude         float64        `gorm:"column:latitude"`            // 维度
		Longitude        float64        `gorm:"column:longitude"`           // 经度
		Photo            string         `gorm:"column:photo"`               // 站点照片
		SiteType         int64          `gorm:"column:site_type"`           // 1,社区，2工厂3产业园
		OnlineCardType   int64          `gorm:"column:online_card_type"`    // 1,时长卡2次数卡3电量卡
		IsTemp           int64          `gorm:"column:is_temp"`             // 是否开启临时从到，1，开启，2关闭
		MaxPower         int64          `gorm:"column:max_power"`           // 最大限制功率
		MaxTimes         int64          `gorm:"column:max_times"`           // 最大充电时长：单位分钟
		IsTempRefund     int64          `gorm:"column:is_temp_refund"`      // 是否允许临充退费
		WxQrcode         string         `gorm:"column:wx_qrcode"`           // 微信客服二维码
		PowerPrice       int64          `gorm:"column:power_price"`         // 电费单价 单位元
		AllowUserRefund  int64          `gorm:"column:allow_user_refund"`   // 是否允许用户自助退款，线上卡资源退款
		IsLongCharge     int64          `gorm:"column:is_long_charge"`      // 是否开启充模式1开启，2关闭
		IsProtect        int64          `gorm:"column:is_protect"`          // 是否开启保险模式，1开启2关闭
		ProtectFee       int64          `gorm:"column:protect_fee"`         // 保险金额，单位分
		IsTempRefundType int64          `gorm:"column:is_temp_refund_type"` // 临时充电退款方式：1，退款到储值卡，2按订单原路退回
		SiteControlType  int64          `gorm:"column:site_control_type"`   // 站点充电模式：1，正常充电模式，2车场充电模式
		IsInside         int64          `gorm:"column:is_inside"`           // 站点是否是内部站点，只允许内部人员使用
		CreatedAt        time.Time      `gorm:"column:created_at"`
		UpdatedAt        time.Time      `gorm:"column:updated_at"`
		DeletedAt        gorm.DeletedAt `gorm:"column:deleted_at;index"`
		Remark           string         `gorm:"column:remark"`
		OnlineCardId     int64          `gorm:"column:online_card_id"` // 线上卡-储值卡模板id
		Notice           string         `gorm:"column:notice"`
		ExtraTime        int64          `gorm:"column:extra_time"` // 浮充时间
	}
)

func (SiteCharge) TableName() string {
	return "`site_charge`"
}

func newSiteChargeModel(conn *gorm.DB, c cache.CacheConf) *defaultSiteChargeModel {
	return &defaultSiteChargeModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`site_charge`",
	}
}

func (m *defaultSiteChargeModel) Insert(ctx context.Context, tx *gorm.DB, data *SiteCharge) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&data).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultSiteChargeModel) FindOne(ctx context.Context, id int64) (*SiteCharge, error) {
	minyunSiteChargeIdKey := fmt.Sprintf("%s%v", cacheMinyunSiteChargeIdPrefix, id)
	var resp SiteCharge
	err := m.QueryCtx(ctx, &resp, minyunSiteChargeIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&SiteCharge{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSiteChargeModel) Update(ctx context.Context, tx *gorm.DB, data *SiteCharge) error {
	old, err := m.FindOne(ctx, data.Id)
	if err != nil && err != ErrNotFound {
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(data).Error
	}, m.getCacheKeys(old)...)
	return err
}

func (m *defaultSiteChargeModel) getCacheKeys(data *SiteCharge) []string {
	if data == nil {
		return []string{}
	}
	minyunSiteChargeIdKey := fmt.Sprintf("%s%v", cacheMinyunSiteChargeIdPrefix, data.Id)
	cacheKeys := []string{
		minyunSiteChargeIdKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultSiteChargeModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		if err == ErrNotFound {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&SiteCharge{}, id).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultSiteChargeModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.TransactCtx(ctx, fn)
}

func (m *defaultSiteChargeModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheMinyunSiteChargeIdPrefix, primary)
}

func (m *defaultSiteChargeModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&SiteCharge{}).Where("`id` = ?", primary).Take(v).Error
}
