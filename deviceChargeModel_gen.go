// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"fmt"
	"time"

	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
)

var (
	cacheMinyunDeviceChargeIdPrefix = "cache:minyun:deviceCharge:id:"
)

type (
	deviceChargeModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *DeviceCharge) error

		FindOne(ctx context.Context, id int64) (*DeviceCharge, error)
		Update(ctx context.Context, tx *gorm.DB, data *DeviceCharge) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultDeviceChargeModel struct {
		gormc.CachedConn
		table string
	}

	DeviceCharge struct {
		Id            int64          `gorm:"column:id"`
		ChannelId     int64          `gorm:"column:channel_id"`
		ShopId        int64          `gorm:"column:shop_id"`
		SiteId        int64          `gorm:"column:site_id"`
		AreaId        int64          `gorm:"column:area_id"` // 站点区域id
		Qrcode        string         `gorm:"column:qrcode"`
		DeviceId      string         `gorm:"column:device_id"`       // sn
		DeviceType    string         `gorm:"column:device_type"`     // 设备类型
		Mode          string         `gorm:"column:mode"`            // 工作模式：第0位：0=联网，1=刷卡。第1位：0=RN8209，1=BL0939。第2位：0=无短路预检，1=有短路预检。第3位：0=光耦检测模式，1=带灯模式。
		PortNum       int64          `gorm:"column:port_num"`        // 端口数
		Version       string         `gorm:"column:version"`         // 设备版本
		Vid           string         `gorm:"column:vid"`             // 虚拟id
		BoardVersion  string         `gorm:"column:board_version"`   // 电源版本
		IsOnline      int64          `gorm:"column:is_online"`       // 是否在线，1在线，2不在线
		Strength      int64          `gorm:"column:strength"`        // 信号
		Temperature   int64          `gorm:"column:temperature"`     // 温度
		Voltage       int64          `gorm:"column:voltage"`         // 电压v
		SimCode       string         `gorm:"column:sim_code"`        // sim卡卡号
		SyncTime      int64          `gorm:"column:sync_time"`       // 设备同步时间
		DeviceDiyCode string         `gorm:"column:device_diy_code"` // 设备现场编号
		PushTime      int64          `gorm:"column:push_time"`       // 设备初始投放时间，绑定时触发
		ServerEndTime int64          `gorm:"column:server_end_time"` // 设备服务到期时间
		TotalEnergy   float64        `gorm:"column:total_energy"`    // 设备总耗电
		DeviceStat    int64          `gorm:"column:device_stat"`     // 设备状态1，正常
		Frequency     string         `gorm:"column:frequency"`       // 频率
		IsIncludeRtc  int64          `gorm:"column:is_include_rtc"`  // 是否有RTC模块 0否1是
		Module        int64          `gorm:"column:module"`          // 通讯模块
		Imei          string         `gorm:"column:imei"`            // 通讯模块IMEI号
		ModuleVersion string         `gorm:"column:module_version"`  // 通讯模块版本号
		Remark        string         `gorm:"column:remark"`
		CreatedAt     time.Time      `gorm:"column:created_at"`
		UpdatedAt     time.Time      `gorm:"column:updated_at"`
		DeletedAt     gorm.DeletedAt `gorm:"column:deleted_at;index"`
	}
)

func (DeviceCharge) TableName() string {
	return "`device_charge`"
}

func newDeviceChargeModel(conn *gorm.DB, c cache.CacheConf) *defaultDeviceChargeModel {
	return &defaultDeviceChargeModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`device_charge`",
	}
}

func (m *defaultDeviceChargeModel) Insert(ctx context.Context, tx *gorm.DB, data *DeviceCharge) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&data).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultDeviceChargeModel) FindOne(ctx context.Context, id int64) (*DeviceCharge, error) {
	minyunDeviceChargeIdKey := fmt.Sprintf("%s%v", cacheMinyunDeviceChargeIdPrefix, id)
	var resp DeviceCharge
	err := m.QueryCtx(ctx, &resp, minyunDeviceChargeIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&DeviceCharge{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDeviceChargeModel) Update(ctx context.Context, tx *gorm.DB, data *DeviceCharge) error {
	old, err := m.FindOne(ctx, data.Id)
	if err != nil && err != ErrNotFound {
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(data).Error
	}, m.getCacheKeys(old)...)
	return err
}

func (m *defaultDeviceChargeModel) getCacheKeys(data *DeviceCharge) []string {
	if data == nil {
		return []string{}
	}
	minyunDeviceChargeIdKey := fmt.Sprintf("%s%v", cacheMinyunDeviceChargeIdPrefix, data.Id)
	cacheKeys := []string{
		minyunDeviceChargeIdKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultDeviceChargeModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		if err == ErrNotFound {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&DeviceCharge{}, id).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultDeviceChargeModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.TransactCtx(ctx, fn)
}

func (m *defaultDeviceChargeModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheMinyunDeviceChargeIdPrefix, primary)
}

func (m *defaultDeviceChargeModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&DeviceCharge{}).Where("`id` = ?", primary).Take(v).Error
}
