// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"fmt"
	"time"

	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
)

var (
	cacheMinyunUserShopIdPrefix = "cache:minyun:userShop:id:"
)

type (
	userShopModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *UserShop) error

		FindOne(ctx context.Context, id int64) (*UserShop, error)
		Update(ctx context.Context, tx *gorm.DB, data *UserShop) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultUserShopModel struct {
		gormc.CachedConn
		table string
	}

	UserShop struct {
		Id            int64          `gorm:"column:id"`
		UserId        int64          `gorm:"column:user_id"`
		UserRoleId    int64          `gorm:"column:user_role_id"`
		IsShopOwner   int64          `gorm:"column:is_shop_owner"`  // 是否是商户主体，1，是，2否
		ProfitType    int64          `gorm:"column:profit_type"`    // 1实时结算2延时结算
		AutoCheck     int64          `gorm:"column:auto_check"`     // 1 手动提现2自动提现
		BankNum       string         `gorm:"column:bank_num"`       // 银行卡号
		BankName      string         `gorm:"column:bank_name"`      // 银行名称
		OpenBank      string         `gorm:"column:open_bank"`      // 开户行
		Balance       int64          `gorm:"column:balance"`        // 单位分，余额
		Withdrawn     int64          `gorm:"column:withdrawn"`      // 已提现
		LockBalance   int64          `gorm:"column:lock_balance"`   // 待结算
		OutingBalance int64          `gorm:"column:outing_balance"` // 提现中
		Stat          int64          `gorm:"column:stat"`           // 账户状态1，正常，2禁用
		JoinYear      int64          `gorm:"column:join_year"`      // 合作年限
		JoinTime      int64          `gorm:"column:join_time"`      // 合作开始时间
		CreatedAt     time.Time      `gorm:"column:created_at"`
		UpdatedAt     time.Time      `gorm:"column:updated_at"`
		DeletedAt     gorm.DeletedAt `gorm:"column:deleted_at;index"`
		Remark        string         `gorm:"column:remark"`
	}
)

func (UserShop) TableName() string {
	return "`user_shop`"
}

func newUserShopModel(conn *gorm.DB, c cache.CacheConf) *defaultUserShopModel {
	return &defaultUserShopModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`user_shop`",
	}
}

func (m *defaultUserShopModel) Insert(ctx context.Context, tx *gorm.DB, data *UserShop) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&data).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultUserShopModel) FindOne(ctx context.Context, id int64) (*UserShop, error) {
	minyunUserShopIdKey := fmt.Sprintf("%s%v", cacheMinyunUserShopIdPrefix, id)
	var resp UserShop
	err := m.QueryCtx(ctx, &resp, minyunUserShopIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&UserShop{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserShopModel) Update(ctx context.Context, tx *gorm.DB, data *UserShop) error {
	old, err := m.FindOne(ctx, data.Id)
	if err != nil && err != ErrNotFound {
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(data).Error
	}, m.getCacheKeys(old)...)
	return err
}

func (m *defaultUserShopModel) getCacheKeys(data *UserShop) []string {
	if data == nil {
		return []string{}
	}
	minyunUserShopIdKey := fmt.Sprintf("%s%v", cacheMinyunUserShopIdPrefix, data.Id)
	cacheKeys := []string{
		minyunUserShopIdKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultUserShopModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		if err == ErrNotFound {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&UserShop{}, id).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultUserShopModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.TransactCtx(ctx, fn)
}

func (m *defaultUserShopModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheMinyunUserShopIdPrefix, primary)
}

func (m *defaultUserShopModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&UserShop{}).Where("`id` = ?", primary).Take(v).Error
}
