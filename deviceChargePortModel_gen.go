// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"fmt"
	"time"

	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
)

var (
	cacheMinyunDeviceChargePortIdPrefix = "cache:minyun:deviceChargePort:id:"
)

type (
	deviceChargePortModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *DeviceChargePort) error

		FindOne(ctx context.Context, id int64) (*DeviceChargePort, error)
		Update(ctx context.Context, tx *gorm.DB, data *DeviceChargePort) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultDeviceChargePortModel struct {
		gormc.CachedConn
		table string
	}

	DeviceChargePort struct {
		Id                int64          `gorm:"column:id"`
		ChannelId         int64          `gorm:"column:channel_id"`
		ShopId            int64          `gorm:"column:shop_id"`
		SiteId            int64          `gorm:"column:site_id"`
		AreaId            int64          `gorm:"column:area_id"`
		PortId            int64          `gorm:"column:port_id"`           // 端口编码
		Qrcode            string         `gorm:"column:qrcode"`            // 端口二维码
		PortStat          int64          `gorm:"column:port_stat"`         // 端口状态 0=空闲，1=充电中，2=有充电器但未充电（用户未启动充电），3=有充电器但未充电（已充满电），4=端口有故障（短路或该路无法计量），5=浮充，6=存储器损坏,7＝插座弹片卡住故障，8＝接触不良或保险丝烧断故障，9＝(算法-继电器粘连)，10=霍尔开关损坏（即插入检测传感器）。11=（预检-继电器坏或保险丝断）13=（预检-负载短路）。14=(过滤性预检-继电器粘连),15=(刷卡芯片损坏故障)
		ChargeTime        int64          `gorm:"column:charge_time"`       // 充电时长
		ChargeFlatPower   int64          `gorm:"column:charge_flat_power"` // 充电中心跳包期间的平均功率
		IsLine            int64          `gorm:"column:is_line"`           // 启动上电类型 0表示离线刷卡启动充电 ；=1表示在线服务器指令启动；=2表示免费启动；3=验证码启动
		TotalPower        float64        `gorm:"column:total_power"`       // 端口总耗能 度
		ChargeMaxPower    int64          `gorm:"column:charge_max_power"`  // 充电中心跳包期间最大功率
		ChargeMinPower    int64          `gorm:"column:charge_min_power"`  // 充电中心跳包期间最小功率
		NowOrderId        int64          `gorm:"column:now_order_id"`
		NowUserId         int64          `gorm:"column:now_user_id"`
		LastedOrderId     int64          `gorm:"column:lasted_order_id"`
		LastedUserId      int64          `gorm:"column:lasted_user_id"`
		ChargePortStat    int64          `gorm:"column:charge_port_stat"`     // 充电中端口状态1，充电中，2，浮充
		ChargeThisPower   int64          `gorm:"column:charge_this_power"`    // 充电中实时心跳功率
		ChargeAllMaxPower int64          `gorm:"column:charge_all_max_power"` // 充电中至今峰值功率
		Voltage           int64          `gorm:"column:voltage"`              // 电压
		Current           int64          `gorm:"column:current"`              // 电流
		Remark            string         `gorm:"column:remark"`
		CreatedAt         time.Time      `gorm:"column:created_at"`
		UpdatedAt         time.Time      `gorm:"column:updated_at"`
		DeletedAt         gorm.DeletedAt `gorm:"column:deleted_at;index"`
		Temperature       int64          `gorm:"column:temperature"`   // 环境温度
		ChargeAmount      float64        `gorm:"column:charge_amount"` // 充电中累计电量
		PortTemperature   int64          `gorm:"column:port_temperature"`
		TimeStamp         int64          `gorm:"column:time_stamp"`   // 时间戳
		OccupyTime        int64          `gorm:"column:occupyTime"`   // 占位时长 单位 分
		LockUserId        int64          `gorm:"column:lock_user_id"` // 端口绑定指定用户，未指定默认为0
		DeviceId          int64          `gorm:"column:device_id"`    // 设备id
	}
)

func (DeviceChargePort) TableName() string {
	return "`device_charge_port`"
}

func newDeviceChargePortModel(conn *gorm.DB, c cache.CacheConf) *defaultDeviceChargePortModel {
	return &defaultDeviceChargePortModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`device_charge_port`",
	}
}

func (m *defaultDeviceChargePortModel) Insert(ctx context.Context, tx *gorm.DB, data *DeviceChargePort) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&data).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultDeviceChargePortModel) FindOne(ctx context.Context, id int64) (*DeviceChargePort, error) {
	minyunDeviceChargePortIdKey := fmt.Sprintf("%s%v", cacheMinyunDeviceChargePortIdPrefix, id)
	var resp DeviceChargePort
	err := m.QueryCtx(ctx, &resp, minyunDeviceChargePortIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&DeviceChargePort{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDeviceChargePortModel) Update(ctx context.Context, tx *gorm.DB, data *DeviceChargePort) error {
	old, err := m.FindOne(ctx, data.Id)
	if err != nil && err != ErrNotFound {
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(data).Error
	}, m.getCacheKeys(old)...)
	return err
}

func (m *defaultDeviceChargePortModel) getCacheKeys(data *DeviceChargePort) []string {
	if data == nil {
		return []string{}
	}
	minyunDeviceChargePortIdKey := fmt.Sprintf("%s%v", cacheMinyunDeviceChargePortIdPrefix, data.Id)
	cacheKeys := []string{
		minyunDeviceChargePortIdKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultDeviceChargePortModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		if err == ErrNotFound {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&DeviceChargePort{}, id).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultDeviceChargePortModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.TransactCtx(ctx, fn)
}

func (m *defaultDeviceChargePortModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheMinyunDeviceChargePortIdPrefix, primary)
}

func (m *defaultDeviceChargePortModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&DeviceChargePort{}).Where("`id` = ?", primary).Take(v).Error
}
