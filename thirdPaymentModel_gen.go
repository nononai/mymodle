// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"fmt"
	"time"

	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
)

var (
	cacheMinyunThirdPaymentIdPrefix = "cache:minyun:thirdPayment:id:"
	cacheMinyunThirdPaymentSnPrefix = "cache:minyun:thirdPayment:sn:"
)

type (
	thirdPaymentModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *ThirdPayment) error

		FindOne(ctx context.Context, id int64) (*ThirdPayment, error)
		FindOneBySn(ctx context.Context, sn string) (*ThirdPayment, error)
		Update(ctx context.Context, tx *gorm.DB, data *ThirdPayment) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultThirdPaymentModel struct {
		gormc.CachedConn
		table string
	}

	ThirdPayment struct {
		Id             int64     `gorm:"column:id"`
		Sn             string    `gorm:"column:sn"` // 流水单号
		CreateTime     time.Time `gorm:"column:create_time"`
		UpdateTime     time.Time `gorm:"column:update_time"`
		DeleteTime     time.Time `gorm:"column:delete_time"`
		DelState       int64     `gorm:"column:del_state"`
		Version        int64     `gorm:"column:version"`          // 乐观锁版本号
		OpenId         string    `gorm:"column:open_id"`          // 用户openid
		PayMode        string    `gorm:"column:pay_mode"`         // 支付方式 1:微信支付 2:支付宝支付 3：系统内部支付
		TradeType      string    `gorm:"column:trade_type"`       // 第三方支付类型
		TradeState     string    `gorm:"column:trade_state"`      // 第三方交易状态
		PayTotal       int64     `gorm:"column:pay_total"`        // 支付总金额(分)
		TransactionId  string    `gorm:"column:transaction_id"`   // 第三方支付单号
		TradeStateDesc string    `gorm:"column:trade_state_desc"` // 支付状态描述
		OrderSn        string    `gorm:"column:order_sn"`         // 业务单号
		ServiceType    string    `gorm:"column:service_type"`     // 业务类型
		PayStatus      int64     `gorm:"column:pay_status"`       // 平台内交易状态   -1:支付失败 0:未支付 1:支付成功 2:已退款
		PayTime        time.Time `gorm:"column:pay_time"`         // 支付成功时间
	}
)

func (ThirdPayment) TableName() string {
	return "`third_payment`"
}

func newThirdPaymentModel(conn *gorm.DB, c cache.CacheConf) *defaultThirdPaymentModel {
	return &defaultThirdPaymentModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`third_payment`",
	}
}

func (m *defaultThirdPaymentModel) Insert(ctx context.Context, tx *gorm.DB, data *ThirdPayment) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&data).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultThirdPaymentModel) FindOne(ctx context.Context, id int64) (*ThirdPayment, error) {
	minyunThirdPaymentIdKey := fmt.Sprintf("%s%v", cacheMinyunThirdPaymentIdPrefix, id)
	var resp ThirdPayment
	err := m.QueryCtx(ctx, &resp, minyunThirdPaymentIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&ThirdPayment{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultThirdPaymentModel) FindOneBySn(ctx context.Context, sn string) (*ThirdPayment, error) {
	minyunThirdPaymentSnKey := fmt.Sprintf("%s%v", cacheMinyunThirdPaymentSnPrefix, sn)
	var resp ThirdPayment
	err := m.QueryRowIndexCtx(ctx, &resp, minyunThirdPaymentSnKey, m.formatPrimary, func(conn *gorm.DB, v interface{}) (interface{}, error) {
		if err := conn.Model(&ThirdPayment{}).Where("`sn` = ?", sn).Take(&resp).Error; err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultThirdPaymentModel) Update(ctx context.Context, tx *gorm.DB, data *ThirdPayment) error {
	old, err := m.FindOne(ctx, data.Id)
	if err != nil && err != ErrNotFound {
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(data).Error
	}, m.getCacheKeys(old)...)
	return err
}

func (m *defaultThirdPaymentModel) getCacheKeys(data *ThirdPayment) []string {
	if data == nil {
		return []string{}
	}
	minyunThirdPaymentIdKey := fmt.Sprintf("%s%v", cacheMinyunThirdPaymentIdPrefix, data.Id)
	minyunThirdPaymentSnKey := fmt.Sprintf("%s%v", cacheMinyunThirdPaymentSnPrefix, data.Sn)
	cacheKeys := []string{
		minyunThirdPaymentIdKey, minyunThirdPaymentSnKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultThirdPaymentModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		if err == ErrNotFound {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&ThirdPayment{}, id).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultThirdPaymentModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.TransactCtx(ctx, fn)
}

func (m *defaultThirdPaymentModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheMinyunThirdPaymentIdPrefix, primary)
}

func (m *defaultThirdPaymentModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&ThirdPayment{}).Where("`id` = ?", primary).Take(v).Error
}
