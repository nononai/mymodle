// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"fmt"
	"time"

	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
)

var (
	cacheMinyunUserBasicIdPrefix = "cache:minyun:userBasic:id:"
)

type (
	userBasicModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *UserBasic) error

		FindOne(ctx context.Context, id int64) (*UserBasic, error)
		Update(ctx context.Context, tx *gorm.DB, data *UserBasic) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultUserBasicModel struct {
		gormc.CachedConn
		table string
	}

	UserBasic struct {
		Id           int64     `gorm:"column:id"`
		Uuid         string    `gorm:"column:uuid"`          // '唯一ID'
		Mobile       string    `gorm:"column:mobile"`        // '手机号'
		Email        string    `gorm:"column:email"`         // '电子邮件'
		Sex          int64     `gorm:"column:sex"`           // '性别'
		UserName     string    `gorm:"column:user_name"`     // '用户名'
		Password     string    `gorm:"column:password"`      // '密码'
		NickName     string    `gorm:"column:nick_name"`     // '昵称'
		Stat         int64     `gorm:"column:stat"`          // '账户状态'
		UnionId      string    `gorm:"column:union_id"`      // 'Union ID'
		AccountType  int64     `gorm:"column:account_type"`  // '账户类型'
		CreatedTime  time.Time `gorm:"column:created_time"`  // '创建时间'
		UpdatedTime  time.Time `gorm:"column:updated_time"`  // '更新时间'
		DeletedTime  time.Time `gorm:"column:deleted_time"`  // '删除时间'
		Truename     string    `gorm:"column:truename"`      // '真实姓名'
		Avatar       string    `gorm:"column:avatar"`        // '头像'
		Token        string    `gorm:"column:token"`         // '令牌'
		PlatId       int64     `gorm:"column:plat_id"`       // '平台'
		CardId       string    `gorm:"column:card_id"`       // 身份证
		AppletOpenid string    `gorm:"column:applet_openid"` // 小程序openid
		MpOpenid     string    `gorm:"column:mp_openid"`     // 公众号openid
		GiftMoney    int64     `gorm:"column:gift_money"`    // '赠送余额'
		Money        int64     `gorm:"column:money"`         // '余额'
		ChannelId    int64     `gorm:"column:channel_id"`
		ShopId       int64     `gorm:"column:shop_id"`
		RegFrom      int64     `gorm:"column:reg_from"`   // 1,微信小程序2微信h5 3 支付宝小程序
		AliOpenid    string    `gorm:"column:ali_openid"` // 支付宝userid
	}
)

func (UserBasic) TableName() string {
	return "`user_basic`"
}

func newUserBasicModel(conn *gorm.DB, c cache.CacheConf) *defaultUserBasicModel {
	return &defaultUserBasicModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`user_basic`",
	}
}

func (m *defaultUserBasicModel) Insert(ctx context.Context, tx *gorm.DB, data *UserBasic) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&data).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultUserBasicModel) FindOne(ctx context.Context, id int64) (*UserBasic, error) {
	minyunUserBasicIdKey := fmt.Sprintf("%s%v", cacheMinyunUserBasicIdPrefix, id)
	var resp UserBasic
	err := m.QueryCtx(ctx, &resp, minyunUserBasicIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&UserBasic{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserBasicModel) Update(ctx context.Context, tx *gorm.DB, data *UserBasic) error {
	old, err := m.FindOne(ctx, data.Id)
	if err != nil && err != ErrNotFound {
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(data).Error
	}, m.getCacheKeys(old)...)
	return err
}

func (m *defaultUserBasicModel) getCacheKeys(data *UserBasic) []string {
	if data == nil {
		return []string{}
	}
	minyunUserBasicIdKey := fmt.Sprintf("%s%v", cacheMinyunUserBasicIdPrefix, data.Id)
	cacheKeys := []string{
		minyunUserBasicIdKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultUserBasicModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		if err == ErrNotFound {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&UserBasic{}, id).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultUserBasicModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.TransactCtx(ctx, fn)
}

func (m *defaultUserBasicModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheMinyunUserBasicIdPrefix, primary)
}

func (m *defaultUserBasicModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&UserBasic{}).Where("`id` = ?", primary).Take(v).Error
}
