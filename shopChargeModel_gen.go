// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"fmt"
	"time"

	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
)

var (
	cacheMinyunShopChargeIdPrefix = "cache:minyun:shopCharge:id:"
)

type (
	shopChargeModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *ShopCharge) error

		FindOne(ctx context.Context, id int64) (*ShopCharge, error)
		Update(ctx context.Context, tx *gorm.DB, data *ShopCharge) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultShopChargeModel struct {
		gormc.CachedConn
		table string
	}

	ShopCharge struct {
		Id               int64          `gorm:"column:id"`
		ShopName         string         `gorm:"column:shop_name"`
		ShopOwner        int64          `gorm:"column:shop_owner"`    // 商户主拥有者
		Certification    int64          `gorm:"column:certification"` // 是否认证，1，已认证，2未认证
		ShopType         int64          `gorm:"column:shop_type"`     // 1,企业2私人
		IsOem            int64          `gorm:"column:is_oem"`        // 是否独立平台，独立收款
		WxAppId          string         `gorm:"column:wx_app_id"`
		WxAppSecret      string         `gorm:"column:wx_app_secret"`
		WxMpAppId        string         `gorm:"column:wx_mp_app_id"`
		WxMpAppSecret    string         `gorm:"column:wx_mp_app_secret"`
		AliAppId         string         `gorm:"column:ali_app_id"`
		AliAppSecret     string         `gorm:"column:ali_app_secret"`
		Balance          int64          `gorm:"column:balance"`           // 余额 单位分
		LockBalance      int64          `gorm:"column:lock_balance"`      // 待结算金额
		WithdrawnBalance int64          `gorm:"column:withdrawn_balance"` // 已提现金额
		OutingBalance    int64          `gorm:"column:outing_balance"`    // 提现中金额
		IsChannel        int64          `gorm:"column:is_channel"`        // 是否运营商直营商户
		JoinYear         int64          `gorm:"column:join_year"`         // 合作年限
		JoinTime         int64          `gorm:"column:join_time"`         // 合作时间
		LinkMobile       string         `gorm:"column:link_mobile"`       // 联系手机号
		LinkAddress      string         `gorm:"column:link_address"`
		LinkName         string         `gorm:"column:link_name"`
		ChannelId        int64          `gorm:"column:channel_id"` // 运营商id
		Remark           string         `gorm:"column:remark"`
		CreatedAt        time.Time      `gorm:"column:created_at"`
		UpdatedAt        time.Time      `gorm:"column:updated_at"`
		DeletedAt        gorm.DeletedAt `gorm:"column:deleted_at;index"`
		ShopStat         int64          `gorm:"column:shop_stat"`
		PlatId           int64          `gorm:"column:plat_id"`
		ProfitType       int64          `gorm:"column:profit_type"` // 1实时结算2延时结算
		ChannelFee       int64          `gorm:"column:channel_fee"` // 平台手续费或分成比例单位百分
		PaymentId        int64          `gorm:"column:payment_id"`  // 商户支付信息id
		OrderFrom        int64          `gorm:"column:order_from"`  // 订单来源1：微信小程序2：微信公众号3：支付宝
	}
)

func (ShopCharge) TableName() string {
	return "`shop_charge`"
}

func newShopChargeModel(conn *gorm.DB, c cache.CacheConf) *defaultShopChargeModel {
	return &defaultShopChargeModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`shop_charge`",
	}
}

func (m *defaultShopChargeModel) Insert(ctx context.Context, tx *gorm.DB, data *ShopCharge) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&data).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultShopChargeModel) FindOne(ctx context.Context, id int64) (*ShopCharge, error) {
	minyunShopChargeIdKey := fmt.Sprintf("%s%v", cacheMinyunShopChargeIdPrefix, id)
	var resp ShopCharge
	err := m.QueryCtx(ctx, &resp, minyunShopChargeIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&ShopCharge{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultShopChargeModel) Update(ctx context.Context, tx *gorm.DB, data *ShopCharge) error {
	old, err := m.FindOne(ctx, data.Id)
	if err != nil && err != ErrNotFound {
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(data).Error
	}, m.getCacheKeys(old)...)
	return err
}

func (m *defaultShopChargeModel) getCacheKeys(data *ShopCharge) []string {
	if data == nil {
		return []string{}
	}
	minyunShopChargeIdKey := fmt.Sprintf("%s%v", cacheMinyunShopChargeIdPrefix, data.Id)
	cacheKeys := []string{
		minyunShopChargeIdKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultShopChargeModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		if err == ErrNotFound {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&ShopCharge{}, id).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultShopChargeModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.TransactCtx(ctx, fn)
}

func (m *defaultShopChargeModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheMinyunShopChargeIdPrefix, primary)
}

func (m *defaultShopChargeModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&ShopCharge{}).Where("`id` = ?", primary).Take(v).Error
}
