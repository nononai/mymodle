// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"fmt"
	"time"

	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
)

var (
	cacheMinyunUserInsideSiteIdPrefix = "cache:minyun:userInsideSite:id:"
)

type (
	userInsideSiteModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *UserInsideSite) error

		FindOne(ctx context.Context, id int64) (*UserInsideSite, error)
		Update(ctx context.Context, tx *gorm.DB, data *UserInsideSite) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultUserInsideSiteModel struct {
		gormc.CachedConn
		table string
	}

	UserInsideSite struct {
		Id        int64          `gorm:"column:id"`
		UserId    int64          `gorm:"column:user_id"`
		SiteId    int64          `gorm:"column:site_id"`
		EndTime   int64          `gorm:"column:end_time"` // 内部站点内部员工结束时间
		CreatedAt time.Time      `gorm:"column:created_at"`
		UpdatedAt time.Time      `gorm:"column:updated_at"`
		DeletedAt gorm.DeletedAt `gorm:"column:deleted_at;index"`
		Remark    string         `gorm:"column:remark"`
	}
)

func (UserInsideSite) TableName() string {
	return "`user_inside_site`"
}

func newUserInsideSiteModel(conn *gorm.DB, c cache.CacheConf) *defaultUserInsideSiteModel {
	return &defaultUserInsideSiteModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`user_inside_site`",
	}
}

func (m *defaultUserInsideSiteModel) Insert(ctx context.Context, tx *gorm.DB, data *UserInsideSite) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&data).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultUserInsideSiteModel) FindOne(ctx context.Context, id int64) (*UserInsideSite, error) {
	minyunUserInsideSiteIdKey := fmt.Sprintf("%s%v", cacheMinyunUserInsideSiteIdPrefix, id)
	var resp UserInsideSite
	err := m.QueryCtx(ctx, &resp, minyunUserInsideSiteIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&UserInsideSite{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserInsideSiteModel) Update(ctx context.Context, tx *gorm.DB, data *UserInsideSite) error {
	old, err := m.FindOne(ctx, data.Id)
	if err != nil && err != ErrNotFound {
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(data).Error
	}, m.getCacheKeys(old)...)
	return err
}

func (m *defaultUserInsideSiteModel) getCacheKeys(data *UserInsideSite) []string {
	if data == nil {
		return []string{}
	}
	minyunUserInsideSiteIdKey := fmt.Sprintf("%s%v", cacheMinyunUserInsideSiteIdPrefix, data.Id)
	cacheKeys := []string{
		minyunUserInsideSiteIdKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultUserInsideSiteModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		if err == ErrNotFound {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&UserInsideSite{}, id).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultUserInsideSiteModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.TransactCtx(ctx, fn)
}

func (m *defaultUserInsideSiteModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheMinyunUserInsideSiteIdPrefix, primary)
}

func (m *defaultUserInsideSiteModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&UserInsideSite{}).Where("`id` = ?", primary).Take(v).Error
}
